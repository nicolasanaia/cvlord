// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  sessions Session[]
  accounts Account[]
  
  profile Profile[]
  experiences Experience[]
  education Education[]
  skills Skills[]
  projects Projects[]
  extracurricular Extracurricular[]
  userLanguages UserLanguages[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  displayName String
  role String
  city String
  state String
  country String
  quotation String
  summary String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 
}

model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role String
  company String
  location String?
  model String?
  startDate DateTime
  endDate DateTime?
  current Boolean
  description String?
  competencies String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@index([userId])
}

model Education {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  institution String
  degree String?
  course String?
  startDate DateTime?
  endDate DateTime?
  description String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@index([userId])
}

model Skills {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  skill String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@index([userId])
}

model Projects {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  description String?
  owner String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@index([userId])
}

model Extracurricular {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  institution String?
  description String?
  location String?
  startDate DateTime
  endDate DateTime?
  current Boolean

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@index([userId])
}

model Languages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  language String

  @@index([language])
}

model UserLanguages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  languageId String
  writeLevel String
  readLevel String
  speechLevel String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}